虚类和接口，其实本质上来说，没有太大的区别。比如 python、C++ 这种语言里是不区分的。基本上是 Java 新搞出来的 一个概念。这种新的概念主要是让类的继承关系更加的“有据可依”，简单的说，区别主要是你只能继承自一个虚类，但是可以继承多个接口，因为继承自某个虚类，说明的是我“是”某个东西。比如 Human 继承自哺乳动物的虚类，那么 Human 就是哺乳动物，而接口的继承（或者实现 implements）指的是，我“有”某个功能，那么 Human 可以 implements 喝水的接口，还可以 implements 吃饭的接口。
因为在面向对象的发展过程中，原本只有父子类关系，后来有一些父类并不具备具体的实例，因此这些父类就会被定义为虚类，必须被一个子类继承才能实例化。比如哺乳动物，这玩意儿没法直接 new 一个，必须制定到底是个啥哺乳动物，是个猫还是个狗。
后来面向对象继续发展，就发现有一些方法大家可以共用，这样不用每个都去指定，比如哺乳动物和甲壳类动物，都可以吃饭和喝水，你说让他们都继承自一个虚类又不一定对，比如都继承自动物或者生物的虚类，但是你会发现可能有的生物不具备吃饭的功能。这个时候，就出现了接口，因为吃饭主要描述的是这个类能做的事情，最后，我们把大家公共的能做的事情抽象出来，做成了接口，但是你单独看接口，比如吃饭这个接口，你不可能去 new 一个吃饭的实例出来，因为他没有具体对应的实体。
所以这大概就是虚类和接口的区别了，虚类可以通过子类实例化，接口无法实例化，必须被其他类实现去描述他是怎么做某些行为的。虚类是类之间的属性共性抽象，接口是类的行为功共性抽象。
